«EXTENSION functions::Javadoc»
«EXTENSION functions::JEAFDeprecated»
«EXTENSION functions::BreakingChange»
«EXTENSION functions::Operation»
«EXTENSION functions::Alias»
«EXTENSION functions::SoftLink»
«EXTENSION functions::Example»
«EXTENSION functions::DefaultComment»
«EXTENSION java::Naming»
«EXTENSION entity::ModelProperties»
«EXTENSION java::GeneratorCommons»




«DEFINE JavadocForType FOR uml::NamedElement»
«IF this.hasMeaningfulJavadoc()»
/**
    «EXPAND AddComment -»
    «EXPAND AliasJavadoc -»
    «EXPAND BreakingChangeJavadoc -»
 * @author «getAuthor()»
 * @version «getVersion()»
    «EXPAND DeprecatedJavadoc -»
 */
«ENDIF»
«ENDDEFINE»


«DEFINE JavadocForOperation FOR uml::Operation»
/**
    «EXPAND AddComment -»
    «EXPAND SecurityRolesComment -»
    «EXPAND BreakingChangeJavadoc -»
    «FOREACH this.getInputParameters() AS param -»
 * @param «param.name» «param.getJavadocCommentForParameter()» «IF param.isJEAFDeprecated()»<br/><b>Deprecated. </b> <i>«param.getDeprecationDescriptionForJavadoc()» (<b>since:</b> «param.getDeprecatedSince()», <b>removed with:</b> «param.getDeprecationRemoval()»)«ENDIF»    
«EXPAND BreakingChangeJavadoc FOR param-»
    «ENDFOREACH -»
    «IF this.hasReturnType() && this.getReturnTypeName() != "void" -»
    «LET this.getReturnType() AS returnType -»
 * @return «IF this.returnsPrimitiveType() == false»{@link «ENDIF»«this.getReturnTypeName()»«IF this.returnsPrimitiveType() == false»}«ENDIF» «returnType.getJavadocCommentForParameter()» «IF returnType.isJEAFDeprecated()»<br/><b>Deprecated. </b> <i>«returnType.getDeprecationDescriptionForJavadoc()» (<b>since:</b> «returnType.getDeprecatedSince()», <b>removed with:</b> «returnType.getDeprecationRemoval()»)«ENDIF»
«EXPAND BreakingChangeJavadoc FOR returnType -»
    «ENDLET-»
    «ENDIF -»
    «EXPAND DeprecatedJavadoc -»
 */
«ENDDEFINE»


«DEFINE JavadocForProperty FOR uml::Property»
«IF this.hasMeaningfulJavadocForProperty()»
/**
    «EXPAND AddComment -»
    «IF this.isSoftLink() -»
 * <p/>This class uses so called soft links for decoupling. The actual type that is hidden by {@link #«asInstanceVar()»} is <code>«type.fqn()»</code><br/>
    «ENDIF -»
    «IF this.defaultValue != null -»
    <br/><b>Default Value:</b> <code>«this.initValue()»</code>
    «ENDIF -»
    «IF this.hasExample() -»
    «IF this.asExample().hasExampleValue() -»
    <br/><b>Example(s):</b> <br/><ul>«FOREACH this.asExample().exampleValues AS exampleValue»<li><code>«exampleValue.makeMultiLineCompatible()»</code></li>
    «ENDFOREACH»</ul>
    «ENDIF -»
    «ENDIF -»
    «EXPAND AliasJavadoc -»
    «EXPAND RESTDocs -»
    «EXPAND BreakingChangeJavadoc -»
    «EXPAND DeprecatedJavadoc -»
 */
«ENDIF»
«ENDDEFINE»


«DEFINE JavadocForPropertyGetter FOR uml::Property»
/**
 * Method returns «IF this.association == null»attribute«ELSE»association«ENDIF» {@link #«asInstanceVar()»}.<br/>
    «IF this.isSoftLink() -»
 * <p/>This class uses so called soft links for decoupling. The actual type that is hidden by {@link #«asInstanceVar()»} is <code>«type.fqn()»</code><br/>
    «ENDIF -»
    «EXPAND AddComment -»
    «EXPAND BreakingChangeJavadoc -»
    «IF this.isSoftLink() == false -»
 * @return «IF type.isPrimitiveType() == false»{@link «this.fqn()»}«ELSE»«this.fqn()»«ENDIF» Value to which {@link #«asInstanceVar()»} is set.
    «ELSE -»
 * @return {@link «IF this.isMultivalued()»«this.getCollectionType()»<«((JMM::SoftLink)this).getJavaSoftLinkType()»>«ELSE»«((JMM::SoftLink)this).getJavaSoftLinkType()»«ENDIF»} Value to which {@link #«asInstanceVar()»} is set.
    «ENDIF -»
    «IF this.association != null && this.isMultivalued() -» 
    The method never returns null and the returned collection is «IF disableCollectionImmutability()»modifiable«ELSE»unmodifiable«ENDIF».
    «ENDIF -»
    «EXPAND DeprecatedJavadoc -»
 */
«ENDDEFINE»


«DEFINE JavadocForPropertyUnset FOR uml::Property»
    /**
     * Method unsets {@link #«asInstanceVar()»}.     
     */
«ENDDEFINE»


«DEFINE JavadocForPropertyAdd FOR uml::Property»
    /**
     * Method adds the passed object to {@link #«asInstanceVar()»}.     
    «EXPAND BreakingChangeJavadoc -»
     * 
     * @param «asParameter()» Object that should be added to {@link #«asInstanceVar()»}. The parameter must not be null.
    «EXPAND DeprecatedJavadoc -»
     */
«ENDDEFINE»


«DEFINE JavadocForPropertyAddAll FOR uml::Property»
    /**
     * Method adds all passed objects to {@link #«asInstanceVar()»}.     
    «EXPAND BreakingChangeJavadoc -»
     * 
     * @param «asParameter()» Collection with all objects that should be added to {@link #«asInstanceVar()»}. The parameter must not be null.
    «EXPAND DeprecatedJavadoc -»
     */
«ENDDEFINE»


«DEFINE JavadocForPropertySetter FOR uml::Property»
/**
 * Method sets «IF this.association == null»attribute«ELSE»association«ENDIF» {@link #«asInstanceVar()»}.<br/>
 «EXPAND functions::Javadoc::AddComment -»
    «EXPAND BreakingChangeJavadoc -»
 * @param «asParameter()» Value to which {@link #«asInstanceVar()»} should be set.
 «EXPAND DeprecatedJavadoc -»
 */
«ENDDEFINE»


«DEFINE JavadocForBuilderSetter(String builderClassName) FOR uml::Property»
/**
 * Method sets «IF this.association == null»attribute«ELSE»association«ENDIF» {@link #«asInstanceVar()»}.<br/>
    «EXPAND BreakingChangeJavadoc -»
 * @param «asParameter()» «IF type.isPrimitiveType() || this.isMultivalued() == false»Value«ELSE»Collection«ENDIF» to which {@link #«asInstanceVar()»} should be set.
 * @return {@link «builderClassName»} Instance of this builder to support chaining setters. Method never returns null.
 «EXPAND DeprecatedJavadoc -»
 */
«ENDDEFINE»


«DEFINE JavadocForBuilderAddTo(String builderClassName) FOR uml::Property»
/**
 * Method adds the passed objects to association {@link #«asInstanceVar()»}.<br/>
    «EXPAND BreakingChangeJavadoc -»
 * @param «asParameter()» Array of objects that should be added to {@link #«asInstanceVar()»}. The parameter may be null.
 * @return {@link «builderClassName»} Instance of this builder to support chaining. Method never returns null.
 «EXPAND DeprecatedJavadoc -»
 */
«ENDDEFINE»


«DEFINE JavadocForBuilderVarArgsSetter(String builderClassName) FOR uml::Property»
/**
 * Method sets «IF this.association == null»attribute«ELSE»association«ENDIF» {@link #«asInstanceVar()»}.<br/>
    «EXPAND BreakingChangeJavadoc -»
 * @param «asParameter()» Array with objects to which {@link #«asInstanceVar()»} should be set.
 * @return {@link «builderClassName»} Instance of this builder to support chaining setters. Method never returns null.
 «EXPAND DeprecatedJavadoc -»
 */
«ENDDEFINE»


«DEFINE JavadocForLiteral FOR uml::EnumerationLiteral»
«IF this.hasMeaningfulJavadoc()»
/**
    «EXPAND AddComment -»
    «EXPAND AliasJavadoc -»
    «EXPAND BreakingChangeJavadoc -»
    «EXPAND DeprecatedJavadoc -»
 */
«ENDIF»
«ENDDEFINE»


«DEFINE AddComment FOR uml::NamedElement -»
    «FOREACH ownedComment.select(e|e.isDefaultComment() == false) AS comment SEPARATOR "<p/>" -»
 «comment.body.trim().convertCommentForJavadoc()»
    «ENDFOREACH -»«ENDDEFINE»

«DEFINE SecurityRolesComment FOR uml::Operation -»
    «IF generateSecurityAnnotation() && hasSecurityRoles() -»
    <p/><b>Authorized Roles:</b> «FOREACH this.getSecurityRolesForDocumentation() AS role SEPARATOR ", "»«role»«ENDFOREACH»
    «ENDIF -» 
«ENDDEFINE»

«DEFINE DeprecatedJavadoc FOR uml::NamedElement -»
    «IF this.isJEAFDeprecated() && this.hasMeaningfulDeprecationInfo() -»
 * @deprecated «this.getDeprecationDescriptionForJavadoc()» (<b>since:</b> «IF this.getDeprecatedSince().length > 0»«this.getDeprecatedSince()»«ELSE»TBD«ENDIF», <b>removed with:</b> «IF this.getDeprecationRemoval().length > 0»«this.getDeprecationRemoval()»«ELSE»TBD«ENDIF»)   
    «ENDIF-»
«ENDDEFINE»

«DEFINE BreakingChangeJavadoc FOR uml::NamedElement -»
    «IF this.isBreakingChange()-»
    <p/><b>Breaking Change with «this.getBreakingChangeActiveWith()»:</b> «this.getBreakingChangeDescription().convertCommentForJavadoc()»   
    «ENDIF-»
«ENDDEFINE»

«DEFINE AliasJavadoc FOR uml::NamedElement -»
    «IF this.isAlias()-»
    <p/><b>Alternate Name:</b> «this.asAlias().getAlternateNameForJavadoc()»   
    «ENDIF-»
«ENDDEFINE»

«DEFINE RESTDocs FOR uml::Property -»
    «IF isTargetRuntimeSpring() -»
	    «IF this.isStereotypeApplied("PathParam") -»
	    <p/><b>Path-Param:</b> «EXPAND java::OpenAPI::RESTParamName»
	    «ENDIF -»
	    «IF this.isStereotypeApplied("HeaderParam") -»
	    <p/><b>Header-Param:</b> «EXPAND java::OpenAPI::RESTParamName»
	    «ENDIF -»
    «ENDIF -»
«ENDDEFINE»


