import uml;
import JMM;

extension java::GeneratorCommons;
extension functions::SystemProperties;


cached boolean isOpenAPISpecification(uml::Element element):
    element.isStereotypeApplied("OpenAPI3Specification");
    
cached OpenAPI3Specification asOpenAPISpecification(uml::Element element):
    (OpenAPI3Specification) element;

cached String getContactName(OpenAPI3Specification spec):
    if spec.contactName.length > 0
    then spec.contactName
    else getOpenAPIContactNameFromSystemProperties();
    
cached String getContactURL(OpenAPI3Specification spec):
    if spec.contactURL.length > 0
    then spec.contactURL
    else getOpenAPIContactURLFromSystemProperties();
    
cached String getContactEmail(OpenAPI3Specification spec):
    if spec.contactEmail.length > 0
    then spec.contactEmail
    else getOpenAPIContactEmailFromSystemProperties();
    
cached String getLicenseName(OpenAPI3Specification spec):
    if spec.licenseName.length > 0
    then spec.licenseName
    else getOpenAPILicenseNameFromSystemProperties();
    
cached String getLicenseURL(OpenAPI3Specification spec):
    if spec.licenseURL.length > 0
    then spec.licenseURL
    else getOpenAPILicenseURLFromSystemProperties();
    
cached String getTermsOfUseURL(OpenAPI3Specification spec):
    if spec.termsOfUseURL.length > 0
    then spec.termsOfUseURL
    else getOpenAPITermsOfUseURLFromSystemProperties();

private cached String getOpenAPIContactNameFromSystemProperties():
    getSystemProperty("switch.gen.openapi.openAPIContactName", "");
    
private cached String getOpenAPIContactURLFromSystemProperties():
    getSystemProperty("switch.gen.openapi.openAPIContactURL", "");
    
private cached String getOpenAPIContactEmailFromSystemProperties():
    getSystemProperty("switch.gen.openapi.openAPIContactEmail", "");
    
private cached String getOpenAPILicenseNameFromSystemProperties():
    getSystemProperty("switch.gen.openapi.openAPILicenseName", "");
    
private cached String getOpenAPILicenseURLFromSystemProperties():
    getSystemProperty("switch.gen.openapi.openAPILicenseURL", "");
    
private cached String getOpenAPITermsOfUseURLFromSystemProperties():
    getSystemProperty("switch.gen.openapi.openAPITermsOfUseURL", "");
    
cached boolean runOpenAPIDependencyCheck():
    getBooleanSystemProperty("switch.gen.openapi.checkOpenAPIDependencies", true);
    
cached boolean useTransitiveOpenAPIDependencies():
	getBooleanSystemProperty("jeaf.generator.useTransitiveOpenAPIDependencies", true);
    
cached boolean generateDependentOpenAPISpecs():
	getBooleanSystemProperty("jeaf.generator.generateDependentOpenAPISpecs", true);
    
cached boolean hasDependency(OpenAPI3Specification source, OpenAPI3Specification target):
    source.getDependentOpenAPISpecs(useTransitiveOpenAPIDependencies()).contains(target);
    
cached List[OpenAPI3Specification] getDependentOpenAPISpecs(OpenAPI3Specification spec):
    spec.getDirectOpenAPIDependencies().getOpenAPISpecFromDependency();
    
cached List[OpenAPI3Specification] getDependentOpenAPISpecs(OpenAPI3Specification spec, boolean transitiv):
	if transitiv == false
	then spec.getDependentOpenAPISpecs()
	else {spec}.toList().getOpenAPIDependencies(true).getOpenAPISpecFromDependency().toSet();
	
private List[OpenAPISpecReference] getDirectOpenAPIDependencies(OpenAPI3Specification spec):
	spec.clientDependency.typeSelect(OpenAPISpecReference);

cached List[OpenAPISpecReference] getOpenAPIDependencies(OpenAPI3Specification spec, boolean transitive):
	if transitive == false
	then spec.getDirectOpenAPIDependencies()
	else {spec}.toList().getRecursiveOpenAPIDependencies().toSet();
	
private List[OpenAPISpecReference] getRecursiveOpenAPIDependencies(List[OpenAPI3Specification] specs):
	if specs.getDirectOpenAPIDependencies().isEmpty == false
	then specs.getDirectOpenAPIDependencies().addAll(specs.getDirectOpenAPIDependencies().getOpenAPISpecFromDependency().getRecursiveOpenAPIDependencies())
	else {};

cached OpenAPI3Specification getOpenAPISpecFromDependency(OpenAPISpecReference dependency):
	dependency.supplier.typeSelect(OpenAPI3Specification);
	
    
    