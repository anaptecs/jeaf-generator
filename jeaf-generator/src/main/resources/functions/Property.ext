import uml;
import JMM;

extension functions::TypeChecks;
extension functions::SoftLink;
extension functions::OpenAPISpecification;
extension java::OpenAPIFunctions;
extension java::GeneratorCommons;

cached boolean isProperty(uml::Element element):
    element.isInstanceOf("org.eclipse.uml2.uml.Property");
    
cached uml::Property asProperty(uml::Element element):
    (uml::Property) element;
    
boolean isTransient(uml::Property property):
  property.isStereotypeApplied("Transient") || property.isStereotypeApplied("CompositeDataTypePublicField");
  
boolean isPrimitiveType(uml::Type type) :
    JAVA com.anaptecs.jeaf.fwk.generator.util.ClassUtil.isPrimitive(org.eclipse.uml2.uml.Type);

boolean isBasicType(uml::Type type):
    JAVA com.anaptecs.jeaf.fwk.generator.util.ClassUtil.isBasicType(org.eclipse.uml2.uml.Type);

cached boolean belongsToBidirectionalAssociation(uml::Property property):
    property.association != null && property.association.getAllAttributes().select(e|e.isNavigable()).size > 1;
    
cached boolean belongsToTransientBidirectionalAssociation(uml::Property property):
    property.belongsToBidirectionalAssociation() && property.association.getAllAttributes().selectFirst(e|e.isTransient()) != null;
    
cached OpenAPI3Specification getOwnOpenAPISpecification(Property property):
    property.getNearestPackage().getOpenAPISpecificationForPackage();
    
cached OpenAPI3Specification getReferencedOpenAPISpecification(Property property):
    property.type.getNearestPackage().getOpenAPISpecificationForPackage();

private cached OpenAPI3Specification getOpenAPISpecificationForPackage(Package package):
    package.getRelationships().typeSelect(Dependency).client.typeSelect(OpenAPI3Specification).first();
    
    
cached boolean checkOpenAPIDependencies(Property property):
    if property.type.isBasicOpenAPIType() || property.type == null || property.getReferencedOpenAPISpecification() == null || property.isSoftLink()
    then true
    else property.getOwnOpenAPISpecification() == property.getReferencedOpenAPISpecification() || property.getOwnOpenAPISpecification().hasDependency(property.getReferencedOpenAPISpecification());

cached boolean checkForOrphanedOpenAPITypes(Property property):
    if property.type.isBasicOpenAPIType() || property.type == null
    then true
    else property.getReferencedOpenAPISpecification() != null;
    
cached boolean hasJavaWrapperTypeForProperty(uml::Property property):
    property.type.hasJavaWrapperType();

cached boolean hasJavaWrapperType(uml::Type type):
    if type.isBasicType() && !type.isStringType()
    then true
    else false;

cached String getJavaWrapperTypeForProperty(uml::Property property):
    property.type.getJavaWrapperTypeNameForType();

cached String getJavaWrapperTypeNameForType(uml::Type type):
    if type.isIntegerType()
    then "java.lang.Integer"
    else if type.isBooleanType()
    then "java.lang.Boolean"
    else if type.isByteType()
    then "java.lang.Byte"
    else if type.isCharacterType()
    then "java.lang.Character"
    else if type.isShortType()
    then "java.lang.Short"
    else if type.isFloatType()
    then "java.lang.Float"
    else if type.isDoubleType()
    then "java.lang.Double"
    else type.name.toFirstUpper();

