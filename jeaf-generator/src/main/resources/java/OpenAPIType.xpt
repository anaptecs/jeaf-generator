«EXTENSION java::Naming»
«EXTENSION java::GeneratorCommons»
«EXTENSION java::OpenAPIFunctions»
«EXTENSION functions::SoftLink»
«EXTENSION functions::Class»
«EXTENSION functions::SystemProperties»
«EXTENSION functions::Property»
«EXTENSION functions::OpenAPIDataType»

«IMPORT uml»
«IMPORT JMM»
«IMPORT java»
«IMPORT entity»
«IMPORT jeaf»

«DEFINE GenerateOpenAPIType(OpenAPI3Specification spec) FOR OpenAPIType -»
    «IF this.superClass.isEmpty == true || this.isTopOfClassHierarchy()-»
        «EXPAND GenerateOpenAPIBaseType(spec) FOR this-»
    «ELSE-»
        «EXPAND GenerateOpenAPISubType(spec) FOR this-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE GenerateOpenAPIBaseType(OpenAPI3Specification spec) FOR OpenAPIType -»
    «IF suppressClassNameCommentInOpenAPISpec() == false -»
    # «this.umlFQN()»
    «ENDIF-»
    «this.name»:
      type: object
      additionalProperties: false
      «IF this.hasComment()-»
        «IF this.hasMultiLineComment()-»
      description: «getOpenAPICommentStyle()»
        «this.getCommentForOpenAPIDescription("        ")»
        «ELSE-»
      description: «this.getCommentForOpenAPIDescription("            ")»
        «ENDIF-»
      «ENDIF-»
      «IF this.isTopOfClassHierarchy()-»
      discriminator:
        propertyName: «this.getDescriminatorPropertyName()»
        «IF this.generateClassMapping() == true-»
        mapping:
          «name»: «this.getOpenAPIType(spec)»
          «FOREACH this.getAllSubclasses().typeSelect(OpenAPIType).select(e|e.isAbstract == false) AS subclass-»
          «subclass.getDiscriminatorValue()»: «subclass.getOpenAPIType(spec)»
          «ENDFOREACH-»
        «ENDIF-»  
      «ENDIF-»
      «IF superClass.isEmpty == false -»
      allOf:
        - $ref: «superClass.get(0).getOpenAPIType(spec)»
      «ENDIF-»
      «IF this.isDeprecated() -»
      deprecated: true
      «ENDIF -»
      «IF this.isTopOfClassHierarchy() || this.hasRequiredProperties() -»
      required:
        «IF this.isTopOfClassHierarchy() && this.getPropertiesForOpenAPI().selectFirst(e|e.getAttributeName() == this.getDescriminatorPropertyName()) == null-»
        - «this.getDescriminatorPropertyName()»
        «ENDIF-»
        «FOREACH this.getRequiredProperties() AS property-»
        - «property.getAttributeName()»
        «ENDFOREACH-»
      «ENDIF-»
      «IF this.getPropertiesForOpenAPI().size > 0 || this.isTopOfClassHierarchy() -»
      properties:
        «IF this.isTopOfClassHierarchy() && this.getPropertiesForOpenAPI().selectFirst(e|e.getAttributeName() == this.getDescriminatorPropertyName()) == null-»
        «this.getDescriminatorPropertyName()»:
          description: Attribute is used as discriminator for inheritance between data types.
          type: string
        «ENDIF-»
        «FOREACH this.getPropertiesForOpenAPI() AS attribute-»
        «attribute.getAttributeName()»:
          «IF attribute.type.isOpenAPIDataType() && ((OpenAPIDataType) attribute.type).inline == true -»
          «EXPAND java::OpenAPIDataType::GenerateOpenAPIDataType(spec, attribute, "", true) FOR (OpenAPIDataType) attribute.type -»
          «ELSE -»
          «IF attribute.hasComment() -»
            «IF attribute.type.isBasicOpenAPIType() == false && attribute.isMultivalued() == false && attribute.isSoftLink() == false-»
          # «attribute.getCommentForOpenAPIDescription("          # ").replaceAll("<br>", "")»
            «ELSE-»
              «IF attribute.hasMultiLineComment()-»
          description: «getOpenAPICommentStyle()»
            «attribute.getCommentForOpenAPIDescription("            ")»
              «ELSE-»
          description: «attribute.getCommentForOpenAPIDescription("            ")»
              «ENDIF-»
            «ENDIF-»
          «ENDIF-»
          «IF attribute.type.isBasicOpenAPIType() || attribute.isSoftLink() -»
            «IF attribute.isMultivalued() == false-»
            «IF attribute.type.isBasicOpenAPIType()-»
          type: «attribute.type.getOpenAPIType(spec)»
              «IF attribute.hasOpenAPIFormatForProperty()-»
          format: «attribute.getOpenAPIFormatForProperty()»
              «ENDIF-»
              «IF attribute.hasPatternForProperty() -»
          pattern: '«attribute.getPatternForProperty()»'
              «ENDIF-»
          «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("    ") FOR attribute-»    
              «IF attribute.isDeprecated() -»
          deprecated: true
              «ENDIF-»
              «REM»SoftLink«ENDREM-»
              «ELSE-»
          «((SoftLink)attribute).getOpenAPISoftLinkRefType()»: «((SoftLink)attribute).getOpenAPISoftLinkType()»
              «IF ((SoftLink)attribute).hasOpenAPISoftLinkFormat() -»
          format: «((SoftLink)attribute).getOpenAPISoftLinkFormat()»
              «ENDIF-»
              «IF attribute.isDeprecated() -»
          deprecated: true
              «ENDIF-»
              «ENDIF-»
            «ELSE-»
              «IF attribute.type.isByteType() -»
          type: string
          format: byte
          «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("    ") FOR attribute-»          
              «ELSEIF attribute.isSoftLink()-»
          type: array
          items:
            «IF isOpenAPIVersion30() -»
            «((SoftLink)attribute).getOpenAPISoftLinkRefType()»: «((SoftLink)attribute).getOpenAPISoftLinkType()»
            «ELSE -»
            type: 
              - «((SoftLink)attribute).getOpenAPISoftLinkType()»
              «IF attribute.isNullable() -»
              - "null"
              «ENDIF -»
            «ENDIF -»
              «IF ((SoftLink)attribute).hasOpenAPISoftLinkFormat() -»
            format: «((SoftLink)attribute).getOpenAPISoftLinkFormat()»
              «ENDIF-»
              «IF attribute.isDeprecated() -»
          deprecated: true
              «ENDIF-»
              «ELSE -»
          type: array
          items:
            «IF isOpenAPIVersion30() -»
            type: «attribute.type.getOpenAPIType(spec)»
            «ELSE -»
            type: 
              - «attribute.type.getOpenAPIType(spec)»
              «IF attribute.isNullable() -»
              - "null"
              «ENDIF -»
            «ENDIF -»
              «IF attribute.hasOpenAPIFormatForProperty()-»
            format: «attribute.getOpenAPIFormatForProperty()»
              «ENDIF-»
              «IF attribute.hasPatternForProperty() -»
            pattern: '«attribute.getPatternForProperty()»'
              «ENDIF-»
            «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("    ") FOR attribute-»              
              «IF attribute.isDeprecated() -»
          deprecated: true
              «ENDIF-»
            «ENDIF-»
           «ENDIF-»
          «IF attribute.isMultivalued() == false || isOpenAPIVersion30() || attribute.type.isByteType() -»
          «IF attribute.isNullable() == false || suppressNotRequiredNullableInOpenAPISpec() == false -»
          nullable: «attribute.isNullable()»
          «ENDIF-»
          «ENDIF -»
          «IF attribute.isReadOnly() && true == false  -»
          readOnly: «attribute.isReadOnly()»
          «ENDIF-»  
          «IF attribute.isWriteOnly() -»
          writeOnly: «attribute.isWriteOnly()»
          «ENDIF-»  
          «IF attribute.defaultValue != null -»
          default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
          «ENDIF-»
          «EXPAND java::OpenAPIHelper::GenerateExample("          ") FOR attribute -»
          «REM»Handling complex types«ENDREM-»
          «ELSE-»
            «IF attribute.isMultivalued() == false && this.hasMultivaluedTemplateBinding(attribute) == false -»
              «IF attribute.isDeprecated() -»
          # Property "«attribute.getAttributeName()»" is marked as deprecated. However OpenAPI does not support to mark references to complex types as deprecated.
              «ENDIF-»
              «IF isOneOfForClassHierachieEnabled() && attribute.type.getAllConcreteSubclasses().size > 0 -»
          oneOf:
                «IF ((Class)attribute.type).isAbstract == false -»
            - $ref: «attribute.type.getOpenAPIType(spec)»
                «ENDIF-»
                «FOREACH attribute.type.getAllConcreteSubclasses() AS subclass -»
            - $ref: «subclass.getOpenAPIType(spec)»
                «ENDFOREACH-»
              «ELSE-»
		        «IF this.isTemplateProperty(attribute) -»
                    «IF this.getTemplateBindingType(attribute).isBasicType() -»
          type: «this.getTemplateBindingType(attribute).getOpenAPIType(spec)» 
                    «ELSEIF this.getTemplateBindingType(attribute).isInlinedOpenAPIDataType() -»
                        «IF this.getTemplateBindingType(attribute).asOpenAPIDataType().compositeDataType == true -»
          type: string
                        «ELSE -»
          type: «this.getTemplateBindingType(attribute).ownedAttribute.first().type.getOpenAPIType(spec)»
                        «ENDIF -»
                    «ELSE-»
          $ref: «this.getTemplateBindingType(attribute).getOpenAPIType(spec)»
                    «ENDIF-»
		        «ELSE-»
          $ref: «attribute.type.getOpenAPIType(spec)»
                «ENDIF-»
              «ENDIF-»
            «ELSE-»
              «IF attribute.isDeprecated() -»
          deprecated: true
              «ENDIF-»
          type: array
          items:
              «IF isOneOfForClassHierachieEnabled() && attribute.type.getAllConcreteSubclasses().size > 0 -»
            oneOf:
                «IF ((Class)attribute.type).isAbstract == false -»
              - $ref: «attribute.type.getOpenAPIType(spec)»
                «ENDIF-»
                «FOREACH attribute.type.getAllConcreteSubclasses() AS subclass -»
              - $ref: «subclass.getOpenAPIType(spec)»
                «ENDFOREACH-»
              «ELSE-»
                «IF this.isTemplateProperty(attribute) -»
                    «IF this.getTemplateBindingType(attribute).isBasicType() -»
            type: «this.getTemplateBindingType(attribute).getOpenAPIType(spec)»
                    «ELSEIF this.getTemplateBindingType(attribute).isInlinedOpenAPIDataType() -»
                        «IF this.getTemplateBindingType(attribute).asOpenAPIDataType().compositeDataType == true -»
            type: string
                        «ELSE -»
            type: «this.getTemplateBindingType(attribute).ownedAttribute.first().type.getOpenAPIType(spec)»
                        «ENDIF -»
                    «ELSE-»
            $ref: «this.getTemplateBindingType(attribute).getOpenAPIType(spec)»
                    «ENDIF-»
                «ELSE-»
            $ref: «attribute.type.getOpenAPIType(spec)»
                «ENDIF-»
              «ENDIF-»
          «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("    ") FOR attribute-»
            «ENDIF-»
          «ENDIF-»
          «ENDIF-»
        «ENDFOREACH-»
      «ENDIF-»
«ENDDEFINE»

«DEFINE GenerateOpenAPISubType(OpenAPI3Specification spec) FOR OpenAPIType -»
    «IF suppressClassNameCommentInOpenAPISpec() == false -»
    # «this.umlFQN()»
    «ENDIF-»
    «this.name»:
      «IF this.hasComment()-»
        «IF this.hasMultiLineComment()-»
      description: «getOpenAPICommentStyle()»
        «this.getCommentForOpenAPIDescription("        ")»
        «ELSE-»
      description: «this.getCommentForOpenAPIDescription("        ")»
        «ENDIF-»
      «ENDIF-»
      «IF this.isDeprecated() -»
      deprecated: true
      «ENDIF -»
      allOf:
        - $ref: «superClass.get(0).getOpenAPIType(spec)»
        - type: object
          additionalProperties: false
      «IF this.hasRequiredProperties() -»
          required:
        «FOREACH this.getRequiredProperties() AS property-»
            - «property.getAttributeName()»
        «ENDFOREACH-»
      «ENDIF-»
      «IF this.getPropertiesForOpenAPI().size > 0 -»
          properties:
        «FOREACH this.getPropertiesForOpenAPI() AS attribute-»
            «attribute.getAttributeName()»:
          «IF attribute.type.isOpenAPIDataType() && ((OpenAPIDataType) attribute.type).inline == true -»
          «EXPAND java::OpenAPIDataType::GenerateOpenAPIDataType(spec, attribute, "    ", true) FOR (OpenAPIDataType) attribute.type -»
          «ELSE -»
          «IF attribute.hasComment() -»
            «IF attribute.type.isBasicOpenAPIType() == false && attribute.isMultivalued() == false && attribute.isSoftLink() == false-»
              # «attribute.getCommentForOpenAPIDescription("              # ").replaceAll("<br>", "")»
            «ELSE-»
              «IF attribute.hasMultiLineComment()-»
              description: «getOpenAPICommentStyle()»
                «attribute.getCommentForOpenAPIDescription("                ")»
              «ELSE-»
              description: «attribute.getCommentForOpenAPIDescription("                ")»
              «ENDIF-»
            «ENDIF-»
          «ENDIF-»
          «IF attribute.type.isBasicOpenAPIType() || attribute.isSoftLink() -»
            «IF attribute.isMultivalued() == false-»
              «IF attribute.type.isBasicOpenAPIType()-»
              type: «attribute.type.getOpenAPIType(spec)»
              «IF attribute.hasOpenAPIFormatForProperty()-»
              format: «attribute.getOpenAPIFormatForProperty()»
              «ENDIF-»
              «IF attribute.hasPatternForProperty() -»
              pattern: '«attribute.getPatternForProperty()»'
              «ENDIF-»
              «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("        ") FOR attribute-»    
              «IF attribute.isDeprecated() -»
              deprecated: true
              «ENDIF-»
              «REM»SoftLink«ENDREM-»
              «ELSE-»
              «((SoftLink)attribute).getOpenAPISoftLinkRefType()»: «((SoftLink)attribute).getOpenAPISoftLinkType()»
              «IF ((SoftLink)attribute).hasOpenAPISoftLinkFormat() -»
              format: «((SoftLink)attribute).getOpenAPISoftLinkFormat()»
              «ENDIF-»
              «IF attribute.isDeprecated() -»
              deprecated: true
              «ENDIF-»
              «ENDIF-»
            «ELSE-»
              «IF attribute.type.isByteType() -»
              type: string
              format: byte
              «IF attribute.isStereotypeApplied("Size") -»
                «IF ((Size) attribute).min != -1-»
              minLength: «((Size) attribute).min»
                «ENDIF-»
                «IF ((Size) attribute).max != -1-»
              maxLength: «((Size) attribute).max»
                «ENDIF-»
              «ENDIF-»
              «ELSEIF attribute.isSoftLink()-»
              type: array
              items:
                «IF isOpenAPIVersion30() -»
                «((SoftLink)attribute).getOpenAPISoftLinkRefType()»: «((SoftLink)attribute).getOpenAPISoftLinkType()»
                «ELSE -»
                type: 
                  - «((SoftLink)attribute).getOpenAPISoftLinkType()»
                  «IF attribute.isNullable() -»
                  - "null"
                  «ENDIF -»
                «ENDIF -»
              «IF ((SoftLink)attribute).hasOpenAPISoftLinkFormat() -»
                format: «((SoftLink)attribute).getOpenAPISoftLinkFormat()»
              «ENDIF-»
              «IF attribute.isDeprecated() -»
              deprecated: true
              «ENDIF-»
              «ELSE -»
              type: array
              items:
                «IF isOpenAPIVersion30() -»
                type: «attribute.type.getOpenAPIType(spec)»
                «ELSE -»
                type: 
                  - «attribute.type.getOpenAPIType(spec)»
                  «IF attribute.isNullable() -»
                  - "null"
                  «ENDIF -»
                «ENDIF -»
              «IF attribute.hasOpenAPIFormatForProperty()-»
                format: «attribute.getOpenAPIFormatForProperty()»
              «ENDIF-»
              «IF attribute.hasPatternForProperty() -»
                pattern: '«attribute.getPatternForProperty()»'
              «ENDIF-»
              «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("        ") FOR attribute-»              
              «IF attribute.isDeprecated() -»
                deprecated: true
              «ENDIF-»
            «ENDIF-»
           «ENDIF-»
              «IF attribute.isMultivalued() == false || isOpenAPIVersion30() || attribute.type.isByteType() -»
              «IF attribute.isNullable() == false || suppressNotRequiredNullableInOpenAPISpec() == false -»
              nullable: «attribute.isNullable()»
              «ENDIF-»
              «ENDIF -»
          «IF attribute.isReadOnly() && true == false -»
              readOnly: «attribute.isReadOnly()»
          «ENDIF-»  
          «IF attribute.isWriteOnly() -»
              writeOnly: «attribute.isWriteOnly()»
          «ENDIF-»  
          «IF attribute.defaultValue != null -»
              default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
          «ENDIF-»
            «EXPAND java::OpenAPIHelper::GenerateExample("              ") FOR attribute -»
          «REM»Handling complex types«ENDREM-»
          «ELSE-»
            «IF attribute.isMultivalued() == false-»
              «IF attribute.isDeprecated() -»
              # Property "«attribute.getAttributeName()»" is marked as deprecated. However OpenAPI does not support to mark references to complex types as deprecated.
              «ENDIF-»
              «IF isOneOfForClassHierachieEnabled() && attribute.type.getAllConcreteSubclasses().size > 0 -»
              oneOf:
                «IF ((Class)attribute.type).isAbstract == false -»
                - $ref: «attribute.type.getOpenAPIType(spec)»
                «ENDIF-»
                «FOREACH attribute.type.getAllConcreteSubclasses() AS subclass -»
                - $ref: «subclass.getOpenAPIType(spec)»
                «ENDFOREACH-»
              «ELSE-»
              $ref: «attribute.type.getOpenAPIType(spec)»
              «ENDIF-»
            «ELSE-»
              «IF attribute.isDeprecated() -»
              deprecated: true
              «ENDIF-»
              type: array
              items:
              «IF isOneOfForClassHierachieEnabled() && attribute.type.getAllConcreteSubclasses().size > 0 -»
                oneOf:
                «IF ((Class)attribute.type).isAbstract == false -»
                  - $ref: «attribute.type.getOpenAPIType(spec)»
                «ENDIF-»
                «FOREACH attribute.type.getAllConcreteSubclasses() AS subclass -»
                  - $ref: «subclass.getOpenAPIType(spec)»
                «ENDFOREACH-»
              «ELSE-»
                $ref: «attribute.type.getOpenAPIType(spec)»
              «ENDIF-»
              «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("        ") FOR attribute-»
            «ENDIF-»
          «ENDIF-»
          «ENDIF-»
        «ENDFOREACH-»
      «ENDIF-»
«ENDDEFINE»
