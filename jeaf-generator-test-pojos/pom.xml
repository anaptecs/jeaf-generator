<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.anaptecs.jeaf.generator</groupId>
		<artifactId>jeaf-generator-project</artifactId>
		<version>1.21.1-SNAPSHOT</version>
	</parent>

	<name>JEAF Generator Test POJOs</name>
	<artifactId>jeaf-generator-test-pojos</artifactId>
	<packaging>jar</packaging>

	<dependencies>
		<dependency>
			<groupId>com.anaptecs.jeaf.validation</groupId>
			<artifactId>jeaf-validation-api-spring</artifactId>
			<version>${jeaf.validation.api.version}</version>
		</dependency>

		<dependency>
			<groupId>com.anaptecs.jeaf.tools</groupId>
			<artifactId>jeaf-tools-api</artifactId>
			<version>${jeaf.tools.api.version}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<!-- Dependency is required as of Java 11 javax.annotations are no longer part of standard JDK -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>${javax.annotation-api.version}</version>
		</dependency>

		<dependency>
			<groupId>com.anaptecs.jeaf.x-fun</groupId>
			<artifactId>jeaf-x-fun-default-runtime</artifactId>
			<version>${jeaf.x-fun.impl.version}</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.anaptecs.jeaf.json</groupId>
			<artifactId>jeaf-json-impl-runtime</artifactId>
			<version>${jeaf.json.impl.version}</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>

		<dependency>
		    <groupId>nl.jqno.equalsverifier</groupId>
		    <artifactId>equalsverifier</artifactId>
		    <version>${equalsverifier.version}</version>
		    <scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>com.anaptecs.jeaf.generator</groupId>
				<artifactId>jeaf-generator-maven-plugin</artifactId>
				<version>${project.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>Generator</goal>
						</goals>
						<phase>generate-sources</phase>
					</execution>
				</executions>
				<configuration>
					<!-- Define input files and directories where output should be write to. -->
					<xmiDirectory>${project.basedir}/../jeaf-generator-test-model/xmi</xmiDirectory>
					<umlModelFile>JEAF_Test.uml</umlModelFile>
					<sourceDirectory>${project.basedir}/src-gen/main/java</sourceDirectory>
					<sourceGenDirectory>${project.basedir}/src-gen/main/java</sourceGenDirectory>
					<resourceDirectory>${project.basedir}/src-gen/main/resources</resourceDirectory>
					<resourceGenDirectory>${project.basedir}/src-gen/main/resources</resourceGenDirectory>

					<!-- Configure behavior concerning existing files in src-gen and res-gen directory. It is strongly recommended to clean directories before generating new files. -->
					<cleanSourceGen>true</cleanSourceGen>
					<cleanResourceGen>true</cleanResourceGen>
					
					<!-- Define whitelist of package in UML model generator should take care when generating code. -->
					<packages>
						<package>com.anaptecs.jeaf.junit.pojo</package>
						<package>com.anaptecs.jeaf.junit.generics</package>
						<package>com.anaptecs.jeaf.accounting</package>
					</packages>

					<!-- Define what should be generated. By default nothing is generated. -->
					<generatePOJOs>true</generatePOJOs>
					<generateEqualsAndHashCode>true</generateEqualsAndHashCode>
					<enableDetailedToStringMethod>true</enableDetailedToStringMethod>
					<generateJacksonAnnotations>true</generateJacksonAnnotations>
					<enableSemVerForJSON>true</enableSemVerForJSON>
					<generateHeavyExtensibleEnums>true</generateHeavyExtensibleEnums>
					
					<generateOfOperation>true</generateOfOperation>
					<generateValueOfForOpenAPIDataTypes>false</generateValueOfForOpenAPIDataTypes>

					<suppressWarnings>JEAF_SUPPRESS_WARNINGS</suppressWarnings>
					<addGeneratedAnnotation>true</addGeneratedAnnotation>
					
					<javaGenericSoftLinkType>com.anaptecs.jeaf.junit.pojo.softlink.SoftLinkID</javaGenericSoftLinkType>
					<softLinkSuffix>ID</softLinkSuffix>

					<!-- 
					<addGenerationTimestamp>true</addGenerationTimestamp> 
					<generationComment>Happily generated by JEAF Generator</generationComment> 
					-->

					<!-- Define information that are written to file headers -->
					<fileHeaderCompany>anaptecs GmbH, Ricarda-Huch-Str. 71, 72760 Reutlingen, Germany</fileHeaderCompany>
					<fileHeaderAuthor>JEAF Generator</fileHeaderAuthor>
					<fileHeaderCopyright>Copyright 2004 - 2019. All rights reserved.</fileHeaderCopyright>
					<fileHeaderVersion>JEAF Release 1.4.x</fileHeaderVersion>

					<!-- Define code formatting style -->
					<!-- <conventionFile>anaptecs_code_guideline.xml</conventionFile> -->
				</configuration>
			</plugin>

			<!-- JEAF Maven Plugin will generate JEAF configuration files. Besides executing the plugin during build no specific configurations are required to use JEAF X-Fun. -->
			<plugin>
				<groupId>com.anaptecs.jeaf.maven</groupId>
				<artifactId>jeaf-maven-plugin</artifactId>
				<version>${maven.jeaf-plugin.version}</version>
				<executions>
					<!-- Cleanup run. All existing generated files will be deleted before they will be generated again. -->
					<execution>
						<id>Clean</id>
						<goals>
							<goal>GenerateJEAFConfig</goal>
						</goals>
						<phase>clean</phase>
						<configuration>
							<resourceGenDirectory>${basedir}/src-gen/test/resources</resourceGenDirectory>
							<cleanMetaInfDirectory>true</cleanMetaInfDirectory>
							<cleanOnly>true</cleanOnly>
						</configuration>
					</execution>

					<!-- Generate configuration files. -->
					<execution>
						<id>GenerateConfigs</id>
						<goals>
							<goal>GenerateJEAFConfig</goal>
						</goals>
						<configuration>
							<testResourceGenDirectory>${basedir}/src-gen/test/resources</testResourceGenDirectory>
							<testTargetDirectory>${basedir}/target/test-classes</testTargetDirectory>

							<!-- As we are only working with JEAF X-Fun we also limit configuration detection to X-Fun -->
							<explicitConfigurationDetection>
								<detectXFunConfigs>true</detectXFunConfigs>
								<detectToolsConfigs>true</detectToolsConfigs>
								<detectJSONConfigs>true</detectJSONConfigs>
							</explicitConfigurationDetection>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>