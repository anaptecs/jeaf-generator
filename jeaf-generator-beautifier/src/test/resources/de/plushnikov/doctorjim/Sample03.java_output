// ASSUMPTIONS:
//	1) API exceptions must have a message only constructor



// Generated file. Do not edit.
// Generated by 
//   com.hybridlabs.codegen.axis.webservice.AxisServiceRemoteDelegatePlugin 
// from 
//   Service

package com.hybridlabs.axistest.webservice.axis;

import com.hybridlabs.axistest.ResultType;
import com.hybridlabs.axistest.Service;
import com.hybridlabs.axistest.webservice.axis.client.ServiceInterface;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownServiceException;
import java.rmi.RemoteException;
import org.somepackage.cache.CacheKey;
import org.somepackage.cache.InstanceCache;
import org.somepackage.cache.InstanceCacheKey;
import org.somepackage.typemapping.TypeMapper;
import org.somepackage.typemapping.TypeMapperFactory;

public class ServiceRemoteDelegate implements Service {
    	
    private ServiceInterface remote = null;
    private URL url = null;
    
    private TypeMapper typeMapper = TypeMapperFactory.createTypeMapper();

    public ServiceRemoteDelegate() {
    }

    public ServiceRemoteDelegate(URL url) {
        this.url = url;
    }
    
    public ServiceRemoteDelegate(ServiceInterface remote) {
    	this.remote = remote;
    }
    
    public void setUrl(String url) throws MalformedURLException {
    	setUrl(new URL(url));
    }

	public void setUrl(URL url) {
		this.url = url;
	}

	protected URL getUrl() {
		return this.url;
	}
    
    private ServiceInterface getRemote() {
        if (remote == null) {
            synchronized (ServiceRemoteDelegate.class) {
                if (remote == null) {
                    CacheKey cacheKey = new InstanceCacheKey(ServiceInterface.class);
                    remote = (ServiceInterface) InstanceCache.getCached(cacheKey);
                    
                    if (remote == null) {
                        remote = ServiceLookupHelper.lookupService(url);
                        
                        InstanceCache.cache(cacheKey, remote);
                    }
                }
            }
        }
        return remote;
    }


    public String getName(String id) {
        try {    
	        return getRemote().getName(id);
        } catch (RemoteException e) {


	        throw new RuntimeException(e.getMessage(), e);
        } catch (Exception e) {
        	throw new RuntimeException(e.getMessage(), e);
        } catch (Error e) {
        	throw new RuntimeException(e.getMessage(), e);
       	} 
    }    	
    

    public String getName(String p0, String[] p1) throws InstantiationException, UnknownServiceException {
        try {    
	        return getRemote().getName1(p0, p1);
        } catch (RemoteException e) {

        	// unwrap the wrapped exception
        	if (e.getCause() != null) {
                    if (e.getCause() instanceof InstantiationException) {
                        throw (InstantiationException) e.getCause();
                    } 
                    if (e.getCause() instanceof UnknownServiceException) {
                        throw (UnknownServiceException) e.getCause();
                    } 
	        } 

			// otherwise use message to map the exception
            if (e.getMessage() != null) {
                if (e.getMessage().indexOf(InstantiationException.class.getName()) !=-1) {
                    throw new InstantiationException(e.getMessage());
                }
                if (e.getMessage().indexOf(UnknownServiceException.class.getName()) !=-1) {
                    throw new UnknownServiceException(e.getMessage());
                }
            }


	        throw new RuntimeException(e.getMessage(), e);
        } catch (Exception e) {
        	throw new RuntimeException(e.getMessage(), e);
        } catch (Error e) {
        	throw new RuntimeException(e.getMessage(), e);
       	} 
    }    	
    

    private Object _unmarschal(String string) {
        return (ResultType) typeMapper.unmarshall(string);
    }       
    
    private String _marschal(Object object) {
        String typeString =  typeMapper.marshall(object);
        return typeString;
    }       

}