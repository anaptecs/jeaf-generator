package package0.package1.package2;

import com.algebraic.test.DoublePrecisionValue;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.databind.json.JsonMapper.Builder;
import my.used.Foo;
import my.used.annotation.MyAnnotation;
import package0.package1.ClassA;
import package0.package1.package3.InterfaceC;

@MyAnnotation
class ClassB extends ClassA 
	implements InterfaceB, InterfaceC {
	
    private static String statPrivVisStr = "Check UpperCase";
    private Foo foo;
    String instDefVisStr;
    public boolean instPubVisBool = false;
    private DoublePrecisionValue t;

    void instVoidOp() {
    }

    String instStringOp() {
        return null;
    }

    static int statPubVisIntOp(String strParam) {
        return -1;
    }

  /**
   * Method creates a ready-to-use Jackson Object Mapper. The created object will be configured so that it matches best
   * to the generated classes. It will also use the serializer modules as it was defined in the UML model.
   *
   * @return {@link ObjectMapper} Created object mapper. The method never returns null.
   */
  public static ObjectMapper createObjectMapper( ) {
    // Create builder for object mapper.
    Builder lBuilder = JsonMapper.builder();
    // Set default visibilities so that they match to the generated classes that are intended to be serialized using
    // Jackson
    VisibilityChecker<?> lVisibilityChecker = VisibilityChecker.Std.defaultInstance();
    lVisibilityChecker = lVisibilityChecker.withFieldVisibility(JsonAutoDetect.Visibility.ANY);
    lVisibilityChecker = lVisibilityChecker.withGetterVisibility(JsonAutoDetect.Visibility.NONE);
    lVisibilityChecker = lVisibilityChecker.withIsGetterVisibility(JsonAutoDetect.Visibility.NONE);
    lVisibilityChecker = lVisibilityChecker.withSetterVisibility(JsonAutoDetect.Visibility.NONE);
    lVisibilityChecker = lVisibilityChecker.withCreatorVisibility(JsonAutoDetect.Visibility.ANY);
    lBuilder.visibility(lVisibilityChecker);
    
    // Configure mapper features
    lBuilder.enable(MapperFeature.PROPAGATE_TRANSIENT_MARKER);
    lBuilder.disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);
    
    // Create configured modules and add them as well.
    lBuilder.addModule(BaseModuleFactory.createDataTypeSerializerModule());
    lBuilder.addModule(BaseModuleFactory.createEnumSerializerModule());
    lBuilder.addModule(CompositeModuleFactory.createDataTypeSerializerModule());
    lBuilder.addModule(CompositeModuleFactory.createEnumSerializerModule());
    lBuilder.addModule(TechBaseModuleFactory.createDataTypeSerializerModule());
    lBuilder.addModule(TechBaseModuleFactory.createEnumSerializerModule());
    
    // Create object mapper and return it
    JsonMapper lObjectMapper = lBuilder.build();
    lObjectMapper.setDefaultPropertyInclusion(Include.NON_EMPTY);
    return lObjectMapper;
  }

  public static double getPerimeter(Shape shape) throws IllegalArgumentException {
        if (shape instanceof Rectangle s) {
            // You can use the pattern variable s (of type Rectangle) here.
        } else if (shape instanceof Circle s) {
            // You can use the pattern variable s of type Circle here
            // but not the pattern variable s of type Rectangle.
        } else {
            // You cannot use either pattern variable here.
        }
  }
}