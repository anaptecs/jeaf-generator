/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openapitools.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import openapitools.JSON;


/**
 * PlaceRef
 */
@JsonPropertyOrder({
  PlaceRef.JSON_PROPERTY_OBJECT_TYPE,
  PlaceRef.JSON_PROPERTY_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
@JsonIgnoreProperties(
  value = "objectType", // ignore manually set objectType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the objectType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "objectType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CHStopPlace.class, name = "CHStopPlace"),
  @JsonSubTypes.Type(value = GeoPosition.class, name = "GeoPosition"),
  @JsonSubTypes.Type(value = StopPlaceRef.class, name = "StopPlaceRef"),
  @JsonSubTypes.Type(value = SwissGeoPosition.class, name = "SwissGeoPosition"),
  @JsonSubTypes.Type(value = TopoRef.class, name = "TopoRef"),
  @JsonSubTypes.Type(value = UICStopPlace.class, name = "UICStopPlace"),
})

public class PlaceRef {
  public static final String JSON_PROPERTY_OBJECT_TYPE = "objectType";
  private String objectType;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public PlaceRef() { 
  }

  public PlaceRef objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * Attribute is used as discriminator for inheritance between data types.
   * @return objectType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getObjectType() {
    return objectType;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public PlaceRef name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  /**
   * Return true if this PlaceRef object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaceRef placeRef = (PlaceRef) o;
    return Objects.equals(this.objectType, placeRef.objectType) &&
        Objects.equals(this.name, placeRef.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectType, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaceRef {\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  static {
    // Initialize and register the discriminator mappings.
    Map<String, Class<?>> mappings = new HashMap<>();
    mappings.put("CHStopPlace", CHStopPlace.class);
    mappings.put("GeoPosition", GeoPosition.class);
    mappings.put("StopPlaceRef", StopPlaceRef.class);
    mappings.put("SwissGeoPosition", SwissGeoPosition.class);
    mappings.put("TopoRef", TopoRef.class);
    mappings.put("UICStopPlace", UICStopPlace.class);
    mappings.put("PlaceRef", PlaceRef.class);
    JSON.registerDiscriminator(PlaceRef.class, "objectType", mappings);
  }
}

