/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openapitools.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import openapitools.JSON;


/**
 * DateObject
 */
@JsonPropertyOrder({
  DateObject.JSON_PROPERTY_LOCAL_TIME,
  DateObject.JSON_PROPERTY_LOCAL_DATE,
  DateObject.JSON_PROPERTY_LOCAL_DATE_TIME,
  DateObject.JSON_PROPERTY_CALENDAR,
  DateObject.JSON_PROPERTY_SQL_DATE,
  DateObject.JSON_PROPERTY_UTIL_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class DateObject {
  public static final String JSON_PROPERTY_LOCAL_TIME = "localTime";
  private String _localTime;

  public static final String JSON_PROPERTY_LOCAL_DATE = "localDate";
  private LocalDate _localDate;

  public static final String JSON_PROPERTY_LOCAL_DATE_TIME = "localDateTime";
  private OffsetDateTime localDateTime;

  public static final String JSON_PROPERTY_CALENDAR = "calendar";
  private OffsetDateTime calendar;

  public static final String JSON_PROPERTY_SQL_DATE = "sqlDate";
  private LocalDate sqlDate;

  public static final String JSON_PROPERTY_UTIL_DATE = "utilDate";
  private OffsetDateTime utilDate;

  public DateObject() { 
  }

  public DateObject _localTime(String _localTime) {
    this._localTime = _localTime;
    return this;
  }

  /**
   * Get _localTime
   * @return _localTime
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLocalTime() {
    return _localTime;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocalTime(String _localTime) {
    this._localTime = _localTime;
  }


  public DateObject _localDate(LocalDate _localDate) {
    this._localDate = _localDate;
    return this;
  }

  /**
   * Get _localDate
   * @return _localDate
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getLocalDate() {
    return _localDate;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocalDate(LocalDate _localDate) {
    this._localDate = _localDate;
  }


  public DateObject localDateTime(OffsetDateTime localDateTime) {
    this.localDateTime = localDateTime;
    return this;
  }

  /**
   * Get localDateTime
   * @return localDateTime
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCAL_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getLocalDateTime() {
    return localDateTime;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocalDateTime(OffsetDateTime localDateTime) {
    this.localDateTime = localDateTime;
  }


  public DateObject calendar(OffsetDateTime calendar) {
    this.calendar = calendar;
    return this;
  }

  /**
   * Get calendar
   * @return calendar
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CALENDAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCalendar() {
    return calendar;
  }


  @JsonProperty(JSON_PROPERTY_CALENDAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCalendar(OffsetDateTime calendar) {
    this.calendar = calendar;
  }


  public DateObject sqlDate(LocalDate sqlDate) {
    this.sqlDate = sqlDate;
    return this;
  }

  /**
   * Get sqlDate
   * @return sqlDate
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SQL_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getSqlDate() {
    return sqlDate;
  }


  @JsonProperty(JSON_PROPERTY_SQL_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSqlDate(LocalDate sqlDate) {
    this.sqlDate = sqlDate;
  }


  public DateObject utilDate(OffsetDateTime utilDate) {
    this.utilDate = utilDate;
    return this;
  }

  /**
   * Get utilDate
   * @return utilDate
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UTIL_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getUtilDate() {
    return utilDate;
  }


  @JsonProperty(JSON_PROPERTY_UTIL_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUtilDate(OffsetDateTime utilDate) {
    this.utilDate = utilDate;
  }


  /**
   * Return true if this DateObject object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateObject dateObject = (DateObject) o;
    return Objects.equals(this._localTime, dateObject._localTime) &&
        Objects.equals(this._localDate, dateObject._localDate) &&
        Objects.equals(this.localDateTime, dateObject.localDateTime) &&
        Objects.equals(this.calendar, dateObject.calendar) &&
        Objects.equals(this.sqlDate, dateObject.sqlDate) &&
        Objects.equals(this.utilDate, dateObject.utilDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_localTime, _localDate, localDateTime, calendar, sqlDate, utilDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateObject {\n");
    sb.append("    _localTime: ").append(toIndentedString(_localTime)).append("\n");
    sb.append("    _localDate: ").append(toIndentedString(_localDate)).append("\n");
    sb.append("    localDateTime: ").append(toIndentedString(localDateTime)).append("\n");
    sb.append("    calendar: ").append(toIndentedString(calendar)).append("\n");
    sb.append("    sqlDate: ").append(toIndentedString(sqlDate)).append("\n");
    sb.append("    utilDate: ").append(toIndentedString(utilDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

