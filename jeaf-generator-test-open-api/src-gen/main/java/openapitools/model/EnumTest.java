/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openapitools.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import openapitools.JSON;


/**
 * EnumTest
 */
@JsonPropertyOrder({
  EnumTest.JSON_PROPERTY_PROPERTY,
  EnumTest.JSON_PROPERTY_ENUM_REF
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class EnumTest {
  public static final String JSON_PROPERTY_PROPERTY = "property";
  private String property;

  public static final String JSON_PROPERTY_ENUM_REF = "enumRef";
  private String enumRef;

  public EnumTest() { 
  }

  public EnumTest property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Get property
   * @return property
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProperty() {
    return property;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProperty(String property) {
    this.property = property;
  }


  public EnumTest enumRef(String enumRef) {
    this.enumRef = enumRef;
    return this;
  }

  /**
   * Get enumRef
   * @return enumRef
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENUM_REF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEnumRef() {
    return enumRef;
  }


  @JsonProperty(JSON_PROPERTY_ENUM_REF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnumRef(String enumRef) {
    this.enumRef = enumRef;
  }


  /**
   * Return true if this EnumTest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnumTest enumTest = (EnumTest) o;
    return Objects.equals(this.property, enumTest.property) &&
        Objects.equals(this.enumRef, enumTest.enumRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(property, enumRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnumTest {\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    enumRef: ").append(toIndentedString(enumRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

