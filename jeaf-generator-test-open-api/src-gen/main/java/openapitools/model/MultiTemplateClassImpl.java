/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openapitools.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import openapitools.model.Message;
import openapitools.model.TemplateEnumTest;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import openapitools.JSON;


/**
 * MultiTemplateClassImpl
 */
@JsonPropertyOrder({
  MultiTemplateClassImpl.JSON_PROPERTY_OBJECT,
  MultiTemplateClassImpl.JSON_PROPERTY_PREVIOUS_STATE,
  MultiTemplateClassImpl.JSON_PROPERTY_NEW_STATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class MultiTemplateClassImpl {
  public static final String JSON_PROPERTY_OBJECT = "object";
  @javax.annotation.Nonnull
  private Message _object;

  public static final String JSON_PROPERTY_PREVIOUS_STATE = "previousState";
  @javax.annotation.Nullable
  private TemplateEnumTest previousState;

  public static final String JSON_PROPERTY_NEW_STATE = "newState";
  @javax.annotation.Nonnull
  private TemplateEnumTest newState;

  public MultiTemplateClassImpl() { 
  }

  public MultiTemplateClassImpl _object(@javax.annotation.Nonnull Message _object) {
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Message getObject() {
    return _object;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObject(@javax.annotation.Nonnull Message _object) {
    this._object = _object;
  }


  public MultiTemplateClassImpl previousState(@javax.annotation.Nullable TemplateEnumTest previousState) {
    this.previousState = previousState;
    return this;
  }

  /**
   * Get previousState
   * @return previousState
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUS_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TemplateEnumTest getPreviousState() {
    return previousState;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousState(@javax.annotation.Nullable TemplateEnumTest previousState) {
    this.previousState = previousState;
  }


  public MultiTemplateClassImpl newState(@javax.annotation.Nonnull TemplateEnumTest newState) {
    this.newState = newState;
    return this;
  }

  /**
   * Get newState
   * @return newState
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NEW_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TemplateEnumTest getNewState() {
    return newState;
  }


  @JsonProperty(JSON_PROPERTY_NEW_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNewState(@javax.annotation.Nonnull TemplateEnumTest newState) {
    this.newState = newState;
  }


  /**
   * Return true if this MultiTemplateClassImpl object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiTemplateClassImpl multiTemplateClassImpl = (MultiTemplateClassImpl) o;
    return Objects.equals(this._object, multiTemplateClassImpl._object) &&
        Objects.equals(this.previousState, multiTemplateClassImpl.previousState) &&
        Objects.equals(this.newState, multiTemplateClassImpl.newState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_object, previousState, newState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiTemplateClassImpl {\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    previousState: ").append(toIndentedString(previousState)).append("\n");
    sb.append("    newState: ").append(toIndentedString(newState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

