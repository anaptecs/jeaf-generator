/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openapitools.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import openapitools.model.LinkObject;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import openapitools.JSON;


/**
 * Stop
 */
@JsonPropertyOrder({
  Stop.JSON_PROPERTY_OBJECT_TYPE,
  Stop.JSON_PROPERTY_NAME,
  Stop.JSON_PROPERTY_LINKS,
  Stop.JSON_PROPERTY_INDEX,
  Stop.JSON_PROPERTY_THE_SOFT_LINK_I_D
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
@JsonIgnoreProperties(
  value = "objectType", // ignore manually set objectType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the objectType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "objectType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = POI.class, name = "POI"),
  @JsonSubTypes.Type(value = UICStop.class, name = "UICStop"),
})

public class Stop {
  public static final String JSON_PROPERTY_OBJECT_TYPE = "objectType";
  private String objectType;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_LINKS = "_links";
  private List<LinkObject> links;

  public static final String JSON_PROPERTY_INDEX = "index";
  private Integer index;

  public static final String JSON_PROPERTY_THE_SOFT_LINK_I_D = "theSoftLinkID";
  private String theSoftLinkID;

  public Stop() { 
  }

  public Stop objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

   /**
   * Attribute is used as discriminator for inheritance between data types.
   * @return objectType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getObjectType() {
    return objectType;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public Stop name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Stop links(List<LinkObject> links) {
    this.links = links;
    return this;
  }

  public Stop addLinksItem(LinkObject linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   *  Java Property Name: &#39;links&#39;  
   * @return links
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LinkObject> getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(List<LinkObject> links) {
    this.links = links;
  }


  public Stop index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Get index
   * minimum: 0
   * maximum: 32
   * @return index
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndex(Integer index) {
    this.index = index;
  }


  public Stop theSoftLinkID(String theSoftLinkID) {
    this.theSoftLinkID = theSoftLinkID;
    return this;
  }

   /**
   * Get theSoftLinkID
   * @return theSoftLinkID
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THE_SOFT_LINK_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTheSoftLinkID() {
    return theSoftLinkID;
  }


  @JsonProperty(JSON_PROPERTY_THE_SOFT_LINK_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTheSoftLinkID(String theSoftLinkID) {
    this.theSoftLinkID = theSoftLinkID;
  }


  /**
   * Return true if this Stop object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stop stop = (Stop) o;
    return Objects.equals(this.objectType, stop.objectType) &&
        Objects.equals(this.name, stop.name) &&
        Objects.equals(this.links, stop.links) &&
        Objects.equals(this.index, stop.index) &&
        Objects.equals(this.theSoftLinkID, stop.theSoftLinkID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectType, name, links, index, theSoftLinkID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stop {\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    theSoftLinkID: ").append(toIndentedString(theSoftLinkID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  static {
    // Initialize and register the discriminator mappings.
    Map<String, Class<?>> mappings = new HashMap<>();
    mappings.put("POI", POI.class);
    mappings.put("UICStop", UICStop.class);
    mappings.put("Stop", Stop.class);
    JSON.registerDiscriminator(Stop.class, "objectType", mappings);
  }
}

