/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service. 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.anaptecs.jeaf.openapi;

import java.util.Objects;
import java.util.Arrays;
import com.anaptecs.jeaf.openapi.LinkObject;
import com.anaptecs.jeaf.openapi.Stop;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 *  &lt;br&gt;&lt;br&gt; Alternate Name: Haltestelle 
 */
@Schema(description = " <br><br> Alternate Name: Haltestelle ")

public class UICStop extends Stop {
  @JsonProperty("uicCode")
  private String uicCode = null;

  @JsonProperty("priority")
  private Integer priority = null;

  @JsonProperty("code")
  private Long code = null;

  @JsonProperty("index2")
  private Integer index2 = null;

  /**
   * Gets or Sets inlineStopTypes
   */
  public enum InlineStopTypesEnum {
    REAL_STOP("REAL_STOP"),
    VIRTUAL_STOP("VIRTUAL_STOP");

    private String value;

    InlineStopTypesEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static InlineStopTypesEnum fromValue(String input) {
      for (InlineStopTypesEnum b : InlineStopTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("inlineStopTypes")
  private List<InlineStopTypesEnum> inlineStopTypes = new ArrayList<>();

  /**
   * Gets or Sets inlineStopType
   */
  public enum InlineStopTypeEnum {
    REAL_STOP("REAL_STOP"),
    VIRTUAL_STOP("VIRTUAL_STOP");

    private String value;

    InlineStopTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static InlineStopTypeEnum fromValue(String input) {
      for (InlineStopTypeEnum b : InlineStopTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("inlineStopType")
  private InlineStopTypeEnum inlineStopType = null;

  public UICStop uicCode(String uicCode) {
    this.uicCode = uicCode;
    return this;
  }

   /**
   * Get uicCode
   * @return uicCode
  **/
  @Schema(required = true, description = "")
  public String getUicCode() {
    return uicCode;
  }

  public void setUicCode(String uicCode) {
    this.uicCode = uicCode;
  }

  public UICStop priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * minimum: 1
   * maximum: 32
   * @return priority
  **/
  @Schema(required = true, description = "")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public UICStop code(Long code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * minimum: 1000
   * maximum: 9999
   * @return code
  **/
  @Schema(required = true, description = "")
  public Long getCode() {
    return code;
  }

  public void setCode(Long code) {
    this.code = code;
  }

  public UICStop index2(Integer index2) {
    this.index2 = index2;
    return this;
  }

   /**
   * Get index2
   * minimum: 0
   * @return index2
  **/
  @Schema(required = true, description = "")
  public Integer getIndex2() {
    return index2;
  }

  public void setIndex2(Integer index2) {
    this.index2 = index2;
  }

  public UICStop inlineStopTypes(List<InlineStopTypesEnum> inlineStopTypes) {
    this.inlineStopTypes = inlineStopTypes;
    return this;
  }

  public UICStop addInlineStopTypesItem(InlineStopTypesEnum inlineStopTypesItem) {
    this.inlineStopTypes.add(inlineStopTypesItem);
    return this;
  }

   /**
   * Get inlineStopTypes
   * @return inlineStopTypes
  **/
  @Schema(required = true, description = "")
  public List<InlineStopTypesEnum> getInlineStopTypes() {
    return inlineStopTypes;
  }

  public void setInlineStopTypes(List<InlineStopTypesEnum> inlineStopTypes) {
    this.inlineStopTypes = inlineStopTypes;
  }

  public UICStop inlineStopType(InlineStopTypeEnum inlineStopType) {
    this.inlineStopType = inlineStopType;
    return this;
  }

   /**
   * Get inlineStopType
   * @return inlineStopType
  **/
  @Schema(required = true, description = "")
  public InlineStopTypeEnum getInlineStopType() {
    return inlineStopType;
  }

  public void setInlineStopType(InlineStopTypeEnum inlineStopType) {
    this.inlineStopType = inlineStopType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UICStop uiCStop = (UICStop) o;
    return Objects.equals(this.uicCode, uiCStop.uicCode) &&
        Objects.equals(this.priority, uiCStop.priority) &&
        Objects.equals(this.code, uiCStop.code) &&
        Objects.equals(this.index2, uiCStop.index2) &&
        Objects.equals(this.inlineStopTypes, uiCStop.inlineStopTypes) &&
        Objects.equals(this.inlineStopType, uiCStop.inlineStopType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uicCode, priority, code, index2, inlineStopTypes, inlineStopType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UICStop {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    uicCode: ").append(toIndentedString(uicCode)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    index2: ").append(toIndentedString(index2)).append("\n");
    sb.append("    inlineStopTypes: ").append(toIndentedString(inlineStopTypes)).append("\n");
    sb.append("    inlineStopType: ").append(toIndentedString(inlineStopType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
